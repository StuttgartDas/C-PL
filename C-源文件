/*C 语言经典100例  练习题答案(部分)*/
/*原址：https://www.runoob.com/cprogramming/c-100-examples.html*/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#pragma region
#pragma endregion

void Switch_Value(int *a, int *b);
void Print_Int_Array(int array[], int length);
void Move_int_array(int array[], int n, int m);
void String_length(char c[]);
double sum_n(double n);
int Power_2(int n);

int main()
{
#pragma region 1、 有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？
// int a;
// int b;
// int c;

/*基础排列组合*/
// for(a = 1; a < 5; a++)
// {
//     for(b = 1; b < 5; b++)
//     {
//         for(c = 1; c < 5; c++)
//         {
//             if(a!=b && a!=c && b!=c)
//             {
//                 printf("%d%d%d\n", a, b, c);
//             }
//         }
//     }
// }

/*基础排列组合， 去重*/
//  for(a = 1; a < 5; a++)
// {
//     for(b = 1; b < 5; b++)
//     {
//         if(b == a)
//         {
//             continue;
//         }
//         for(c = 1; c < 5; c++)
//         {
//             if(c == b || c == a)
//             {
//                 continue;
//             }
//             printf("%d%d%d\n", a, b, c);
//         }
//     }
// }
#pragma endregion

#pragma region 2、 企业发放的奖金根据利润提成。
  // 利润(I)低于或等于10万元时，奖金可提10%；
  // 利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；
  // 20万到40万之间时，高于20万元的部分，可提成5%；
  // 40万到60万之间时高于40万元的部分，可提成3%；
  // 60万到100万之间时，高于60万元的部分，可提成1.5%；
  // 高于100万元时，超过100万元的部分按1%提成。

  // double Bonus_1;
  // double Bonus_2;
  // double Bonus_3;
  // double Bonus_4;
  // double Bonus_5;

  // Bonus_1 = 100000 * 0.1;             //10W
  // Bonus_2 = Bonus_1 + 100000 * 0.075; //20W
  // Bonus_3 = Bonus_2 + 200000 * 0.05;  //40W
  // Bonus_4 = Bonus_3 + 200000 * 0.03;  //60W
  // Bonus_5 = Bonus_4 + 400000 * 0.015; //100W

  // double profit = 0;
  // double Bonus = 0;

  // printf("请输入利润\n");
  // scanf("%lf", &profit);

  // if (profit <= 100000)
  // {
  //   Bonus = profit * 0.1;
  // }
  // if (100000 < profit && profit <= 200000)
  // {
  //   Bonus = Bonus_1 + (profit - 100000) * 0.075;
  // }
  // if (200000 < profit && profit <= 400000)
  // {
  //   Bonus = Bonus_2 + (profit - 200000) * 0.05;
  // }
  // if (400000 < profit && profit <= 600000)
  // {
  //   Bonus = Bonus_3 + (profit - 400000) * 0.3;
  // }
  // if (600000 < profit && profit <= 1000000)
  // {
  //   Bonus = Bonus_4 + (profit - 600000) * 0.015;
  // }
  // if (profit > 1000000)
  // {
  //   Bonus = Bonus_5 + (profit - 1000000) * 0.01;
  // }

  // printf("奖金为：%f\n", Bonus);

#pragma endregion

#pragma region 3、一个整数，它加上100后是一个完全平方数，再加上168又是一个完全平方数，请问该数是多少？
//  int x, m, n, a, b;

//  for(a = 2; a <= 168/2; a+=2)
//  {
//    if(168%a == 0)
//    {
//      b = 168/a;
//      if(a>b && (a+b)%2 == 0 && (a-b)%2 == 0)
//      {
//         m = (a+b)/2;
//         n = (a-b)/2;
//         x = n*n-100;
//         printf("x = %d\n", x);
//      }
//    }
//  }
#pragma endregion

#pragma region 4、输入某年某月某日，判断这一天是这一年的第几天？
  //  int month_days[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30};
  //  int year, month, day;
  //  int sum_days;
  //  int i;

  //  printf("请输入年/月/日:2021,1,23\n");
  //  scanf("%d,%d,%d", &year, &month, &day);

  //  if(year%4==0 || year%400==0)
  //    {
  //      month_days[1] = 29;
  //    }

  //  sum_days = day;

  //  for(i = 0; i < month-1; i++)
  //  {
  //    sum_days += month_days[i];
  //  }

  // printf("全年中的第 %d 天", sum_days);

#pragma endregion

#pragma region 9、 输出9 * 9口诀
  //  int i, j;
  //  for(i = 1; i < 12; i++)
  //  {
  //    for(j = 1; j <= i; j++)
  //    {
  //      printf("%d * %d = %d    ", j, i, i*j);
  //    }
  //    printf("\n");
  //  }
#pragma endregion

#pragma region 古典问题（兔子生崽）：有一对兔子，从出生后第3个月起每个月都生一对兔子，\ 小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？（输出前40个月即可）
  // int No;
  // int Sum_rabbit;
  // int No_front = 1;
  // int No_rear = 1;
  // int i;
  // printf("请输出月数\n");
  // scanf("%d",&No);

  // if (No > 2)
  // {
  //   for (i = 3; i <= No; i++)
  //   {
  //     Sum_rabbit = No_front + No_rear;
  //     printf("%d\n", Sum_rabbit);
  //     No_front = No_rear;
  //     No_rear = Sum_rabbit;
  //   }
  // }else{
  //   Sum_rabbit = 1;
  //   printf("%d\n", Sum_rabbit);
  // }

#pragma endregion

#pragma region 12、判断101到200之间的素数。 试除法
  // int i, j;

  // for (i = 101; i <= 200; i++)
  // {
  //   for (j = 2; j < i; j++)
  //   {
  //     if (i % j == 0)
  //     {
  //       break;
  //     }
  //   }
  //   if (j == i)
  //   {
  //     printf("%d\n", i);
  //   }
  // }

#pragma endregion

#pragma region 13、打印出所有的 "水仙花数"，所谓 \
                                "水仙花数"是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个 "水仙花数"，因为153 = 1的三次方＋5的三次方＋3的三次方。
  // int x;
  // int H, T, O;
  // for(x = 100; x <1000; x++)
  // {
  //   H = x/100;
  //   T = x%100/10;
  //   O = x%10;

  //   if(x == H*H*H+T*T*T+O*O*O)
  //   {
  //     printf("水仙花数为：%d\n", x);
  //   }
  // }
#pragma endregion

#pragma region 14、将一个正整数分解质因数。例如：输入90, 打印出90 = 2 * 3 * 3 * 5。
  //  int x, z;
  //  printf("请输入一个正整数\n");
  //  scanf("%d", &x);

  //  printf("%d = ", x);
  //  for(z = 2; z <= x; z++)
  //  {
  //    while(x%z == 0)
  //    {
  //      printf("%d", z);
  //      x /=z;
  //      if(x!=1)
  //      {
  //        printf("*");
  //      }
  //    }
  //  }

#pragma endregion

#pragma region 15、 利用条件运算符的嵌套来完成此题：学习成绩 >= 90分的同学用A表示，60 - 89分之间的用B表示，60分以下的用C表示
  // int score;
  // char grade;

  // printf("请输入分数： ");
  // scanf("%d", &score);

  // grade = (score >= 90) ? 'A' : ((score >= 60) ? 'B' : 'C');
  // printf("%c\n", grade);

#pragma endregion

#pragma region 16、输入两个正整数m和n，求其最大公约数和最小公倍数。
  /******分解质因数法********/
  //  最大公约数：m、n公共质因数乘积
  //  最小公倍数：m、n公共质因数与各自有质因数的乘积
  //  问题拆解：质因数分解、判断公共质因数、判断自有质因数

  // int decomposition(int m, int *m_f);

  // int m, n;
  // int m_f[20] = {0}, n_f[20] = {0};
  // int m_index, n_index;
  // int Max_common_divisor = 1, Min_common_multiple = 1;

  // printf("请输入整数m、n\n");
  // scanf("%d %d", &m, &n);

  // m_index = decomposition(m, m_f);
  // n_index = decomposition(n, n_f);

  // /*依次选取质因数数组n_f的元素e(假设n为小数)，在质因数数组m_f中查找
  //   1、如果找到相同的数，证明e为公共质因数，记入最大公约数乘积中Max_common_multiple
  //   2、如果未找到相同的数，证明e为整数n的自有质因数，将元素加入m_f的末尾
  //   3、将m_f中的元素相乘即为最小公倍数
  // */
  // if (m_index >= n_index)
  // {
  //   int a, b, c;
  //   c = m_index;
  //   for (a = 0; a < n_index; a++)
  //   {
  //     for (b = 0; b < m_index; b++)
  //     {
  //       if (n_f[a] == m_f[b])
  //       {
  //         Max_common_divisor *= n_f[a];
  //         break;
  //       }
  //     }
  //     if (b >= m_index)
  //     {
  //       m_f[c] = n_f[a];
  //       c++;
  //     }
  //   }
  //   int i;
  //   for (i = 0; i < c; i++)
  //   {
  //     Min_common_multiple *= m_f[i];
  //   }
  // }
  // else
  // {
  //   int a, b, c;
  //   c = n_index;
  //   for (a = 0; a < m_index; a++)
  //   {
  //     for (b = 0; b < n_index; b++)
  //     {
  //       if (m_f[a] == n_f[b])
  //       {
  //         Max_common_divisor *= m_f[a];
  //         break;
  //       }
  //     }
  //     if (b >= n_index)
  //     {
  //       n_f[c] = m_f[a];
  //       c++;
  //     }
  //   }
  //   int i;
  //   for (i = 0; i < c; i++)
  //   {
  //     Min_common_multiple *= n_f[i];
  //   }
  // }

  // printf("最大公约数为： %d\n", Max_common_divisor);
  // printf("最小公倍数为： %d\n", Min_common_multiple);

  /******辗转相除法********/
  // r为m与n的余数，当r为零时，此时的n为最大公约数，否则将n的值赋给m，将r的值赋给n，继续取余，直到满足条件
  // 最小公倍数为：m、n的乘积除以最大公约数
  // int m, n;
  // int r, p;
  // int Max_common_mutiple, Min_common_divisor;

  // printf("请输入两个整数：m、n\n");
  // scanf("%d %d", &m, &n);

  // p = m*n;
  // r  = m%n;
  // while(r!=0)
  // {
  //   m = n;
  //   n = r;
  //   r = m%n;
  // }
  // Max_common_mutiple = n;
  // Min_common_divisor = p/n;

  // printf("最大公约数为: %d, 最小公倍数数为： %d", Max_common_mutiple, Min_common_divisor);

#pragma endregion

#pragma region 17、输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。
  // char c;
  // int letters = 0, spaces = 0, digits = 0, others = 0;
  // printf("请输入一些字母：\n");

  // while ((c = getchar()) != '\n')
  // {
  //   if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
  //     letters++;
  //   else if (c >= '0' && c <= '9')
  //     digits++;
  //   else if (c == ' ')
  //     spaces++;
  //   else
  //     others++;
  // }
  // printf("字母=%d,数字=%d,空格=%d,其他=%d\n", letters, digits, spaces, others);

#pragma endregion

#pragma region 19、一个数如果恰好等于它的因子之和，这个数就称为 "完数"。例如6 = 1＋2＋3.编程找出1000以内的所有完数。
  // int m, sum;

  // for (m = 2; m <= 1000; m++)
  // {
  //   int i;
  //   sum = 0;
  //   for (i = 1; i < m; i++)
  //   {
  //     if (m % i == 0)
  //     {
  //       sum += i;
  //     }
  //   }
  //   if (m == sum)
  //   {
  //     printf("完数为：%d\n", m);
  //   }
  // }
#pragma endregion

#pragma region 20、一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10次反弹多高？
  // float x, h;
  // x = h = 100;
  // int i;
  // for (i = 0; i < 9; i++)
  // {
  //   x += h;
  //   h /= 2;
  // }
  // h /= 2;
  // printf("共经过：%f 米，第10次反弹高度为：%f \n", x, h);

#pragma endregion

#pragma region 23、两个乒乓球队进行比赛，各出三人。甲队为a, b, c三人，乙队为x, y, z三人。已抽签决定比赛名单。有人向队员打听比赛的名单。a说他不和x比，c说他不和x, z比，请编程序找出三队赛手的名单。
  // char Team[] = {'x', 'y', 'z'};

  // int i, j, k;
  // for (i = 0; i < 3; i++)
  // {
  //   for (j = 0; j < 3; j++)
  //   {
  //     if (Team[i] != Team[j])
  //     {
  //       for (k = 0; k < 3; k++)
  //       {
  //         if (Team[k] != Team[i] && Team[k] != Team[j])
  //         {
  //           if (Team[i] != 'x' && Team[k] != 'x' && Team[k] != 'z')
  //           {
  //             printf("a_%c, b_%c, c_%c\n", Team[i], Team[j], Team[k]);
  //           }
  //         }
  //       }
  //     }
  //   }
  // }

#pragma endregion

#pragma region 25、有一分数序列：2 / 1，3 / 2，5 / 3，8 / 5，13 / 8，21 / 13...求出这个数列的前20项之和。
  // double FZ, FM, FZ_N, FM_N;
  // double sum;
  // FZ =1;
  // FM = 2;
  // printf("%d/%d\n", int(FZ), int(FM));
  // sum = double(FZ/FM);
  // int i;
  // for(i = 0; i<20;i++)
  // {
  //   FZ_N = FM;
  //   FM_N = FZ + FM;
  //   FZ = FZ_N;
  //   FM = FM_N;
  //   printf("%d/%d\n", int(FZ), int(FM));
  //   sum += FZ/FM;
  // }
  // printf("前20项的和为：%lf\n", sum);
#pragma endregion

#pragma region 26、 求1 + 2 !+3 !+... + 20 !的和。
  // unsigned long long product, sum;
  // product = 1;
  // int i;
  // for(i = 1; i<21; i++)
  // {
  //   product *= i;
  //   printf("%d 的阶乘为：%lld\n", i, product);
  //   sum += product;
  // }
  // printf("阶乘之和为：%lld\n", sum);

#pragma endregion

#pragma region 27、 利用递归方法求5 !。
  // unsigned long long factorial(int i);
  // int n;
  // printf("请输入要求的阶乘\n");
  // scanf("%d", &n);
  // printf("%d 的阶乘为：%lld\n", n,factorial(n));
#pragma endregion

#pragma region 29、给一个不多于5位的正整数，要求：一、求它是几位数，二、逆序打印出各位数字。
  // int num;
  // int n;
  // printf("请输入一个整数(小于10000)\n");
  // scanf("%d", &num);
  // while (num > 10000)
  // {
  //   printf("输入有误，请重新输入\n");
  //   printf("请输入一个整数(小于10000)\n");
  //   scanf("%d", &num);
  //   n++;
  //   if (n > 10)
  //   {
  //     exit(1);
  //   }
  // }
  // if (num / 1000 > 0)
  // {
  //   printf("它是4位数\n");
  //   printf("个位数为：%d， 十位数为：%d, 百位数为：%d , 千位数为：%d\n", num % 10, num % 100 / 10, num / 100 % 10, num / 1000);
  // }
  // else if (num / 100 > 0)
  // {
  //   printf("它是3位数\n");
  //   printf("个位数为：%d， 十位数为：%d, 百位数为：%d", num % 10, num % 100 / 10, num / 100 % 10);
  // }
  // else if (num / 10 > 0)
  // {
  //   printf("它是2位数\n");
  //   printf("个位数为：%d， 十位数为：%d", num % 10, num % 100 / 10);
  // }
  // else
  // {
  //   printf("它是1位数\n");
  //   printf("个位数为：%d", num % 10);
  // }
#pragma endregion

#pragma region 38、 求一个3 * 3矩阵对角线元素之和
  // int array[3][3];
  // int num;
  // int i, j;
  // int sum;
  // for (i = 0; i < 3; i++)
  // {
  //   for (j = 0; j < 3; j++)
  //   {
  //     printf("请输入一个整数\n");
  //     scanf("%d", &num);
  //     array[i][j] = num;
  //   }
  // }
  //  for(i = 0; i<3; i++)
  // {
  //   for(j = 0; j<3; j++)
  //   {
  //     printf("%d      ", array[i][j]);
  //     if(j == 2)
  //     {
  //       printf("\n");
  //     }
  //   }
  // }
  // for(i = 0; i<3; i++)
  // {
  //   sum += array[i][i];
  // }
  // printf("对角线之和为 %d\n", sum);

#pragma endregion

#pragma region 39、 有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中。
  //   int array[25] = {0};
  //   int i = 0;
  //   int j = 1;
  //   for (; i < 20; i++)
  //   {
  //     array[i] = j;
  //     j += 2;
  //   }
  //   // for (i = 0; i < 25; i++)
  //   // {
  //   //   printf("%d\n", array[i]);
  //   // }
  //   printf("请输入一个数字\n");
  //   int num_input;
  //   scanf("%d", &num_input);
  //   for (i = 0; i < 20; i++)
  //   {
  //     if (num_input < array[i])
  //     {
  //       int j;
  //       for (j = 20; j >= i; j--)
  //       {
  //         array[j] = array[j - 1];
  //       }
  //       array[i] = num_input;
  //       break;
  //     }
  //   }
  //   for (i = 0; i < 25; i++)
  //   {
  //     printf("%d\n", array[i]);
  //   }
  // }

#pragma endregion

#pragma region 40、将一个数组逆序输出。
  // int array[13] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};
  // int array_lenth = sizeof(array) / sizeof(int);
  // printf("%d\n", array_lenth);
  // int i, temp;
  // for (i = 0; i < (array_lenth / 2); i++)
  // {
  //   temp = array[i];
  //   array[i] = array[array_lenth - 1 - i];
  //   array[array_lenth - 1 - i] = temp;
  // }
  // for (i = 0; i < array_lenth; i++)
  // {
  //   printf("%4d", array[i]);
  // }

#pragma endregion

#pragma region 61、打印出杨辉三角形（要求打印出10行）。
  /*解法一*/
  // int array_Y[10][10] = {0};
  // for (int i = 0; i < 10; i++)
  // {
  //   array_Y[i][0] = 1;
  //   array_Y[i][i] = 1;
  // }
  // for (int i = 2; i < 10; i++)
  // {
  //   for (int j = 1; j < i; j++)
  //   {
  //     array_Y[i][j] = array_Y[i - 1][j - 1] + array_Y[i - 1][j];
  //   }
  // }
  // for (int i = 0; i < 10; i++)
  // {
  //   for (int j = 0; j <= i; j++)
  //   {
  //     printf("%8d", array_Y[i][j]);
  //   }
  //   printf("\n");
  // }

  /*解法一改进版*/
  //  int i,j;
  //   int a[10][10]={0};
  //   for(i=0;i<10;i++)
  //   {
  //       a[i][0]=1;
  //       printf("%5d",a[i][0]);
  //       if(i>=1)
  //       {
  //           for(j=1;j<=i;j++)
  //           {
  //               a[i][j]=a[i-1][j-1]+a[i-1][j];
  //               printf("%5d",a[i][j]);
  //           }
  //       }
  //       printf("\n");
  //   }
#pragma endregion

#pragma region 67、输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组。

#pragma region 解法一：两次循环两次比较
// int num_array[10] = {0};
// int num;
// printf("请输入一个数组(数量<10)\n");
// for (int i = 0; i < 10; i++)
// {
//   scanf("%d", &num_array[i]);
// }
// int max_index = 0;
// int min_index = 9;
// for (int i = 0; i < 10; i++)
// {
//   if (num_array[max_index] < num_array[i])
//   {
//     max_index = i;
//   }
// }
// if (max_index != 0)
// {
//  Switch_Value(&num_array[max_index], &num_array[0]);
// }

// for (int i = 0; i < 10; i++)
// {
//   if (num_array[min_index] > num_array[i])
//   {
//     min_index = i;
//   }
// }
// if (min_index != 9)
// {
//  Switch_Value(&num_array[min_index], &num_array[9]);
// }

// for (int i = 0; i < 10; i++)
// {
//   printf("%5d", num_array[i]);
// }
#pragma endregion

#pragma region 解法二：单次比较
  // int num_array[10] = {0};
  // int num;
  // printf("请输入一个数组(数量<10)\n");
  // for (int i = 0; i < 10; i++)
  // {
  //   scanf("%d", &num_array[i]);
  // }
  // int max_index = 0;
  // int min_index = 9;

  // for (int i = 0; i < 10; i++)
  // {
  //   if (num_array[max_index] < num_array[i])
  //   {
  //     max_index = i;
  //   }
  //   if (num_array[min_index] > num_array[i])
  //   {
  //     min_index = i;
  //   }
  // }
  // if (max_index == 9 || min_index == 0)
  // {
  //   if (max_index == 9 && min_index == 0)
  //   {
  //     Switch_Value(&num_array[max_index], &num_array[min_index]);
  //   }
  //   if (max_index == 9 && min_index != 0)
  //   {
  //     Switch_Value(&num_array[max_index], &num_array[0]);
  //     Switch_Value(&num_array[min_index], &num_array[9]);
  //   }
  //   if (min_index == 0 && max_index != 9)
  //   {
  //     Switch_Value(&num_array[min_index], &num_array[9]);
  //     Switch_Value(&num_array[max_index], &num_array[0]);
  //   }
  // }
  // else
  // {
  //   Switch_Value(&num_array[max_index], &num_array[0]);
  //   Switch_Value(&num_array[min_index], &num_array[9]);
  // }

  // for (int i = 0; i < 10; i++)
  // {
  //   printf("%5d", num_array[i]);
  // }
#pragma endregion

#pragma endregion

#pragma region 68、有n个整数，使其前面各数顺序向后移 m 个位置，最后m个数变成最前面的m个数。
  // int num_n;
  // int num_m;
  // int *array_n;

  // printf("请输入整数的个数：n= ");
  // scanf("%d", &num_n);
  // array_n = (int *)calloc(num_n, sizeof(int));
  // if (array_n == NULL)
  // {
  //   printf("动态内存申请失败，请重试~\n");
  //   exit(1);
  // }

  // printf("请输入移动的位置： m= ");
  // scanf("%d", &num_m);

  // printf("请输入整数\n");
  // for (int i = 0; i < num_n; i++)
  // {
  //   scanf("%d", &array_n[i]);
  // }

  // printf("调整前顺序：");
  // Print_Int_Array(array_n, num_n);
  // printf("\n");

  // Move_int_array(array_n, num_n, num_m);
  // printf("调整后顺序：");
  // Print_Int_Array(array_n, num_n);
  // printf("\n");
#pragma endregion

#pragma region 69、有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。
  // int n;
  // int *array_n;
  // int index = 0;
  // int flag;

  // printf("请输入人数\n");
  // scanf("%d", &n);
  // flag = n;
  // array_n = (int *)calloc(n, sizeof(int));

  // /*编号*/
  // for (int i = 0; i < n; i++)
  // {
  //   array_n[i] = i + 1;
  // }

  // /*循环数数1-3*/
  // for (int i = 0; i < n;)
  // {
  //   if (array_n[i] == 0)
  //   {
  //     i++;
  //     if (i == n)
  //     {
  //       i = 0;
  //     }
  //     continue;
  //   }
  //   else
  //   {
  //     index++; //记数

  //     if (index == 3)
  //     {
  //       array_n[i] = 0; //报数为3的人编号置零
  //       flag--;        //剩余人数
  //       index = 0;
  //     }
  //   }
  //   i++;
  //   if (i == n)
  //   {
  //     i = 0;
  //   }

  //   if (flag == 1)  //报数停止条件，剩余人数为1
  //   {
  //     break;
  //   }
  // }

  // printf("剩余数字为：\n");
  // for (int i = 0; i < n; i++)
  // {
  //   if (array_n[i] != 0)
  //   {
  //     printf("第 %d 位：%d \n", i + 1, array_n[i]);
  //   }
  // }
#pragma endregion

#pragma region 70、写一个函数，求一个字符串的长度，在 main 函数中输入字符串，并输出其长度。
// char s[20];
// printf("请输入字符\n");
// scanf("%s", s);
// String_length(s);
#pragma endregion

#pragma region 75、输入一个整数，并将其反转后输出。
  // int data_input = 0;
  // int remainder = 0;
  // int reverse_data = 0;

  // printf("请输入整数\n");
  // scanf("%d", &data_input);

  // while(data_input !=0)
  // {
  //   remainder = data_input%10;
  //   reverse_data = reverse_data*10 + remainder;
  //   data_input /= 10;
  // }
  // printf("反转后为：%d", reverse_data);
#pragma endregion

#pragma region 76、编写一个函数，输入n为偶数时，调用函数求1 / 2 + 1 / 4 + ... + 1 / n, 当输入n为奇数时，调用函数1 / 1 + 1 / 3 + ... + 1 / n(利用指针函数)。
// double n  = 0;
// printf("请输入一个整数n \n");
// scanf("%lf", &n);
// printf("%lf\n", n);
// printf("%lf\n", sum_n(n));
#pragma endregion

#pragma region 80、海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子平均分为五份，多了一个，这只 猴子把多的一个扔入海中，
///////////////拿走了一份。第二只猴子把剩下的桃子又平均分成五份，又多了 一个，它同样把多的一个扔入海中，拿走了一份，
///////////////第三、第四、第五只猴子都是这样做的， 问海滩上原来最少有多少个桃子？
//1、选定五次分桃后的剩余数：sum_peach(必须为4的整数倍)
//2、根据剩余数：sum_peach计算初始的总数
//   a)每次剩余为上一次的4/5
//   b)均分前都要扔掉一个
//   c)每次均分前的数字必须为整数(通过每次剩余数是否为4的倍数进行校验，如果不满足，更新原始sum_peach(回到步骤1)，重新计算)
//3、输出计算结果sum_peach;

// int sum_peach; //每次均分后剩下的桃子总数
// int i = 0;     //分桃的次数
// int j = 1;     //分桃剩余数选择(必须为4的整数倍)

// while(i<5)
// {
//   sum_peach = 4*j;
//   for(i = 0; i<5; i++)
//   {
//     if(sum_peach%4 != 0)
//     {
//       break;
//     }
//     sum_peach = (sum_peach/4)*5+1;
//   }
//   j++;
// }

// printf("最少有：%d个桃子\n", sum_peach);
#pragma endregion

#pragma region 81、809 *? ? = 800 * ? ? +9 * ? ? 其中 ? ? 代表的两位数, 809 * ? ? 为四位数，8 * ? ? 的结果为两位数，9 * ? ? 的结果为3位数。
////////////////求??代表的两位数，及809*??后的结果。
// int x;
// for (x = 10; x < 100; x++)
// {
//   if ((809 * x - 800 * x - 9 * x == 0) && (809 * x > 999) && (8 * x < 99) && (9 * x > 99))
//   {
//     printf("%d\n", x);
//     printf("809 * %d = %d\n", x, 809 * x);
//   }
// }
#pragma endregion

#pragma region 82、八进制转换为十进制
// int Decimal;
// int Octal;
// int quotient;
// int i = 0;

// printf("请输入八进制数\n");
// scanf("%d",&Octal);

// while(Octal)
// {
//   quotient = Octal%10;
//   Decimal += (quotient)*Power_2(i);
//   Octal /= 10;
//   i++;
// }

// printf("转换为十进制为：%d\n", Decimal);
#pragma endregion

#pragma region 83、求0—7所能组成的奇数个数。
  // int sum_even = 4;
  // int sum_line = 4;
  // printf("1位的奇数为： %d\n", sum_line);
  // for (int i = 2; i <= 8; i++)
  // {
  //   if (i == 2)
  //   {
  //     sum_line = 4 * 7;
  //   }
  //   else
  //   {
  //     sum_line *= 8;
  //   }
  //   sum_even += sum_line;
  //   printf("%d位的奇数为： %d\n", i, sum_line);
  // }
  // printf("奇数总数为：  %d\n", sum_even);
#pragma endregion

#pragma region 89、某个公司采用公用电话传递数据，数据是四位的整数，在传递过程中是加密的，
  ///////////////加密规则如下： 每位数字都加上5,然后用和除以10的余数代替该数字，再将第一位和第四位交换，第二位和第三位交换。
  // int data;
  // int data_array[4] = {0};
  // printf("请输入原始数据\n");
  // scanf("%d", &data);

  // for (int i = 0; i < 4; i++)
  // {
  //   data_array[i] = data % 10;
  //   data_array[i] = (data_array[i] + 5) % 10;
  //   data /= 10;
  // }
  // Switch_Value(data_array, data_array + 3);
  // Switch_Value(data_array + 1, data_array + 2);
  // for (int i = 3; i >= 0; i--)
  // {
  //   if (i == 0)
  //   {
  //     data += data_array[i];
  //   }
  //   else
  //   {
  //     data = (data + data_array[i]) * 10;
  //   }
  // }
  // printf("%d\n", data);

#pragma endregion

#pragma region 96、计算字符串中子串出现的次数。

#pragma region 字符逐个比较法
// int Time = 0;
// char string_input[50] = {'0'};
// char sub_string_input[10] = {'0'};
// int length_string;
// int length_sub_string;

// printf("请输入原始字符串(注意小于50个字符)\n");
// gets(string_input);
// length_string = strlen(string_input);

// printf("请输入要查找的字符串\n");
// gets(sub_string_input);
// length_sub_string = strlen(sub_string_input);

// int i = 0;
// int j = 0;
// while(i < length_string)
// {
//   if (string_input[i] == sub_string_input[j])
//   {
//     i++;
//     j++;
//     while (j < length_sub_string)
//     {
//       if (string_input[i] == sub_string_input[j])
//       {
//         i++;
//         j++;
//         continue;
//       }
//       else
//       {
//         j = 0;
//         break;
//       }
//     }
//     if (j == length_sub_string)
//     {
//       Time++;
//       j = 0;
//     }
//   }
//   else{
//     i++;
//   }
// }
// printf("子串出现的次数为：%d\n", Time);
#pragma endregion

#pragma region 子串查找比较法
  //  char str[100];
  //  char sub_str[10];
  //  int len_str;
  //  int len_sub_str;
  //  int Time;

  //  printf("请输入字符串\n");
  //  gets(str);
  //  printf("请输入查找的字符\n");
  //  gets(sub_str);

  //  len_str = strlen(str);
  //  len_sub_str = strlen(sub_str);

  //  int i, j, k;
  //  for(i = 0; i<=len_str-len_sub_str;i++)
  //  {
  //    for(j = 0, k = i; j<len_sub_str&&str[k]==sub_str[j];j++,k++)
  //    {
  //      ;
  //    }
  //    if(j == len_sub_str)
  //    {
  //      Time++;
  //      i = k-1;
  //    }
  //  }
  //  printf("出现的次数为：%d\n", Time);

#pragma endregion

#pragma endregion

#pragma region 97、从键盘输入一些字符，逐个把它们送到磁盘上去，直到输入一个 #为止。
  // FILE *fp = NULL;
  // char filename[20]={'0'};
  // char ch_w;

  // printf("请输入文件名称: \n");
  // gets(filename);
  // if((fp = fopen(filename, "w")) == NULL)
  // {
  //   printf("Error: cannot open file\n");
  //   exit(0);
  // }
  // while(ch_w != '#')
  // {
  //   ch_w = getchar();
  //   fputc(ch_w, fp);
  // }
  // fclose(fp);
#pragma endregion

#pragma region 98、从键盘输入一个字符串，将小写字母全部转换成大写字母，然后输出到一个磁盘文件"test"中保存。 输入的字符串以！结束
// FILE *fp;
// char filename[20] = {"test.txt"};
// char ch_input;

// if((fp = fopen(filename, "w")) == NULL)
//   {
//     printf("Error: cannot open file\n");
//     exit(0);
//   }
  
//   printf("请输入字符串，以！结束\n");
//   while(ch_input != '!')
//   {
//     ch_input = getchar();
//     if(ch_input>=97 && ch_input <=122)
//     {
//        ch_input -= 32;
//     }
//     fputc(ch_input, fp);
//   }

//   fclose(fp);

#pragma endregion

#pragma region 
#pragma endregion


#pragma region
#pragma endregion
}

/********自定义函数***********/

int decomposition(int m, int *m_f) /*质数判断*/
{
  int z;
  int i = 1;
  for (z = 2; z <= m; z++)
  {
    while (m % z == 0)
    {
      m_f[i] = z;
      i++;
      m /= z;
    }
  }
  return i;
}

unsigned long long factorial(int i) /* 斐波纳契数列*/
{
  unsigned long long product;
  if (i == 1)
  {
    product = 1;
  }
  else
  {
    product = i * factorial(i - 1);
  }
  return product;
}

void Switch_Value(int *a, int *b) /* 整型数值交换*/
{

#pragma region Test_Code
  // int a = 10;
  // int b = 20;
  // Switch_Value(&a, &b);
  // printf("%d   %d\n", a, b);
#pragma endregion

  int temp;
  temp = *a;
  (*a) = (*b);
  (*b) = temp;
}

void Print_Int_Array(int array[], int length)
{
  for (int i = 0; i < length; i++)
  {
    printf("%6d", array[i]);
  }
}

void Move_int_array(int array[], int n, int m)
{
  int *p = nullptr;
  int last_item = 0;

  while (m)
  {
    last_item = *(array + n - 1);
    for (p = array + n - 1; p != array; p--)
    {
      *p = *(p - 1);
    }
    *array = last_item;
    m--;
  }
}

void String_length(char c[])
{
  int i = 0;
  while (c[i] != '\0')
  {
    i++;
  }
  printf("字符串长度为： %d", i);
}

double sum_n(double n)
{
  double sum = 0;
  if ((int(n)) % 2 == 0)
  {
    while ((int(n)) > 1)
    {
      sum += 1 / n;
      n -= 2;
    }
  }
  else
  {
    while ((int(n)) > 0)
    {
      sum += 1 / n;
      n -= 1;
    }
  }
  return sum;
}

int Power_8(int n)
{
  int power = 1;
  if (n == 0)
  {
    return power;
  }
  else
  {
    for (int i = 0; i < n; i++)
    {
      power *= 8;
    }
    return power;
  }
}
